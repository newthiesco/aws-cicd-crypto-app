{"dependencies": [{"name": "asn1crypto", "version": "0.24.0", "vulns": []}, {"name": "attrs", "version": "23.1.0", "vulns": []}, {"name": "axmlparserpy", "version": "0.1", "vulns": []}, {"name": "bcrypt", "version": "4.0.1", "vulns": []}, {"name": "beautifulsoup4", "version": "4.11.1", "vulns": []}, {"name": "blessed", "version": "1.19.1", "vulns": []}, {"name": "blessings", "version": "1.7", "vulns": []}, {"name": "boolean-py", "version": "4.0", "vulns": []}, {"name": "build", "version": "0.10.0", "vulns": []}, {"name": "cachecontrol", "version": "0.13.1", "vulns": []}, {"name": "certifi", "version": "2018.1.18", "vulns": [{"id": "PYSEC-2022-42986", "fix_versions": ["2022.12.7"], "aliases": ["CVE-2022-23491", "GHSA-43fp-rhv2-5gv8"], "description": "Certifi is a curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. Certifi 2022.12.07 removes root certificates from \"TrustCor\" from the root store. These are in the process of being removed from Mozilla's trust store. TrustCor's root certificates are being removed pursuant to an investigation prompted by media reporting that TrustCor's ownership also operated a business that produced spyware. Conclusions of Mozilla's investigation can be found in the linked google group discussion."}, {"id": "PYSEC-2023-135", "fix_versions": ["2023.7.22"], "aliases": ["CVE-2023-37920", "GHSA-xqr8-7jwr-rhp7"], "description": "Certifi 2023.07.22 removes root certificates from \"e-Tugra\" from the root store. These are in the process of being removed from Mozilla's trust store. e-Tugra's root certificates are being removed pursuant to an investigation prompted by reporting of security issues in their systems."}]}, {"name": "cffi", "version": "1.15.1", "vulns": []}, {"name": "chardet", "version": "3.0.4", "vulns": []}, {"name": "charset-normalizer", "version": "3.0.1", "vulns": []}, {"name": "cleo", "version": "2.0.1", "vulns": []}, {"name": "cli-helpers", "version": "2.3.0", "vulns": []}, {"name": "click", "version": "8.1.3", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "coloredlogs", "version": "15.0.1", "vulns": []}, {"name": "configobj", "version": "5.0.6", "vulns": [{"id": "GHSA-c33w-24p9-8m24", "fix_versions": ["5.0.9"], "aliases": ["CVE-2023-26112"], "description": "All versions of the package configobj are vulnerable to Regular Expression Denial of Service (ReDoS) via the validate function, using (.+?)\\((.*)\\). **Note:** This is only exploitable in the case of a developer, putting the offending value in a server side configuration file."}]}, {"name": "coverage", "version": "7.6.1", "vulns": []}, {"name": "crashtest", "version": "0.4.1", "vulns": []}, {"name": "cryptography", "version": "39.0.0", "vulns": [{"id": "PYSEC-2023-254", "fix_versions": ["41.0.6"], "aliases": ["GHSA-jfhm-5ghh-2f97", "CVE-2023-49083"], "description": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Calling `load_pem_pkcs7_certificates` or `load_der_pkcs7_certificates` could lead to a NULL-pointer dereference and segfault. Exploitation of this vulnerability poses a serious risk of Denial of Service (DoS) for any application attempting to deserialize a PKCS7 blob/certificate. The consequences extend to potential disruptions in system availability and stability. This vulnerability has been patched in version 41.0.6."}, {"id": "PYSEC-2024-225", "fix_versions": ["42.0.4"], "aliases": ["CVE-2024-26130"], "description": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Starting in version 38.0.0 and prior to version 42.0.4, if `pkcs12.serialize_key_and_certificates` is called with both a certificate whose public key did not match the provided private key and an `encryption_algorithm` with `hmac_hash` set (via `PrivateFormat.PKCS12.encryption_builder().hmac_hash(...)`, then a NULL pointer dereference would occur, crashing the Python process. This has been resolved in version 42.0.4, the first version in which a `ValueError` is properly raised."}, {"id": "GHSA-w7pp-m8wf-vj6r", "fix_versions": ["39.0.1"], "aliases": ["CVE-2023-23931"], "description": "Previously, `Cipher.update_into` would accept Python objects which implement the buffer protocol, but provide only immutable buffers:  ```pycon >>> outbuf = b\"\\x00\" * 32 >>> c = ciphers.Cipher(AES(b\"\\x00\" * 32), modes.ECB()).encryptor() >>> c.update_into(b\"\\x00\" * 16, outbuf) 16 >>> outbuf b'\\xdc\\x95\\xc0x\\xa2@\\x89\\x89\\xadH\\xa2\\x14\\x92\\x84 \\x87\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' ```  This would allow immutable objects (such as `bytes`) to be mutated, thus violating fundamental rules of Python. This is a soundness bug -- it allows programmers to misuse an API, it cannot be exploited by attacker controlled data alone.  This now correctly raises an exception.  This issue has been present since `update_into` was originally introduced in cryptography 1.8."}, {"id": "GHSA-x4qr-2fvf-3mr5", "fix_versions": ["39.0.1"], "aliases": ["CVE-2023-0286"], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20221213.txt and https://www.openssl.org/news/secadv/20230207.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}, {"id": "GHSA-5cpq-8wj7-hf2v", "fix_versions": ["41.0.0"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.5-40.0.2 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://www.openssl.org/news/secadv/20230530.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}, {"id": "GHSA-jm77-qphf-c4w8", "fix_versions": ["41.0.3"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8-41.0.2 are vulnerable to several security issues. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20230731.txt, https://www.openssl.org/news/secadv/20230719.txt, and https://www.openssl.org/news/secadv/20230714.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}, {"id": "GHSA-3ww4-gg4f-jr7f", "fix_versions": ["42.0.0"], "aliases": ["CVE-2023-50782"], "description": "A flaw was found in the python-cryptography package. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data."}, {"id": "GHSA-v8gr-m533-ghj9", "fix_versions": ["41.0.4"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 2.5-41.0.3 are vulnerable to several security issues. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20230908.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}, {"id": "GHSA-9v9h-cgj8-h64p", "fix_versions": ["42.0.2"], "aliases": ["CVE-2024-0727"], "description": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL to crash leading to a potential Denial of Service attack  Impact summary: Applications loading files in the PKCS12 format from untrusted sources might terminate abruptly.  A file in PKCS12 format can contain certificates and keys and may come from an untrusted source. The PKCS12 specification allows certain fields to be NULL, but OpenSSL does not correctly check for this case. This can lead to a NULL pointer dereference that results in OpenSSL crashing. If an application processes PKCS12 files from an untrusted source using the OpenSSL APIs then that application will be vulnerable to this issue.  OpenSSL APIs that are vulnerable to this are: PKCS12_parse(), PKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes() and PKCS12_newpass().  We have also fixed a similar issue in SMIME_write_PKCS7(). However since this function is related to writing data we do not consider it security significant.  The FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue."}, {"id": "GHSA-h4gh-qq45-vh27", "fix_versions": ["43.0.1"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 37.0.0-43.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20240903.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions. "}]}, {"name": "cyclonedx-python-lib", "version": "7.6.2", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "delegator-py", "version": "0.1.1", "vulns": []}, {"name": "distlib", "version": "0.3.7", "vulns": []}, {"name": "dulwich", "version": "0.21.6", "vulns": []}, {"name": "enum34", "version": "1.1.10", "vulns": []}, {"name": "exceptiongroup", "version": "1.2.2", "vulns": []}, {"name": "filelock", "version": "3.12.3", "vulns": []}, {"name": "flask", "version": "2.2.2", "vulns": [{"id": "PYSEC-2023-62", "fix_versions": ["2.2.5", "2.3.2"], "aliases": ["GHSA-m2qf-hxjv-5gpq", "CVE-2023-30861"], "description": "Flask is a lightweight WSGI web application framework. When all of the following conditions are met, a response containing data intended for one client may be cached and subsequently sent by the proxy to other clients. If the proxy also caches `Set-Cookie` headers, it may send one client's `session` cookie to other clients. The severity depends on the application's use of the session and the proxy's behavior regarding cookies. The risk depends on all these conditions being met.  1. The application must be hosted behind a caching proxy that does not strip cookies or ignore responses with cookies. 2. The application sets `session.permanent = True` 3. The application does not access or modify the session at any point during a request. 4. `SESSION_REFRESH_EACH_REQUEST` enabled (the default). 5. The application does not set a `Cache-Control` header to indicate that a page is private or should not be cached.  This happens because vulnerable versions of Flask only set the `Vary: Cookie` header when the session is accessed or modified, not when it is refreshed (re-sent to update the expiration) without being accessed or modified. This issue has been fixed in versions 2.3.2 and 2.2.5."}]}, {"name": "frida", "version": "16.0.8", "vulns": []}, {"name": "frida-tools", "version": "12.0.4", "vulns": []}, {"name": "gunicorn", "version": "20.1.0", "vulns": [{"id": "GHSA-w3h3-4rj7-4ph4", "fix_versions": ["22.0.0"], "aliases": ["CVE-2024-1135"], "description": "Gunicorn fails to properly validate Transfer-Encoding headers, leading to HTTP Request Smuggling (HRS) vulnerabilities. By crafting requests with conflicting Transfer-Encoding headers, attackers can bypass security restrictions and access restricted endpoints. This issue is due to Gunicorn's handling of Transfer-Encoding headers, where it incorrectly processes requests with multiple, conflicting Transfer-Encoding headers, treating them as chunked regardless of the final encoding specified. This vulnerability has been shown to allow access to endpoints restricted by gunicorn. This issue has been addressed in version 22.0.0.  To be affected users must have a network path which does not filter out invalid requests. These users are advised to block access to restricted endpoints via a firewall or other mechanism if they are unable to update."}]}, {"name": "html5lib", "version": "1.1", "vulns": []}, {"name": "humanfriendly", "version": "10.0", "vulns": []}, {"name": "idna", "version": "2.6", "vulns": [{"id": "PYSEC-2024-60", "fix_versions": ["3.7"], "aliases": ["CVE-2024-3651"], "description": "A vulnerability was identified in the kjd/idna library, specifically within the `idna.encode()` function, affecting version 3.6. The issue arises from the function's handling of crafted input strings, which can lead to quadratic complexity and consequently, a denial of service condition. This vulnerability is triggered by a crafted input that causes the `idna.encode()` function to process the input with considerable computational load, significantly increasing the processing time in a quadratic manner relative to the input size."}]}, {"name": "importlib-metadata", "version": "6.0.0", "vulns": []}, {"name": "importlib-resources", "version": "6.0.1", "vulns": []}, {"name": "iniconfig", "version": "2.0.0", "vulns": []}, {"name": "installer", "version": "0.7.0", "vulns": []}, {"name": "ipaddress", "version": "1.0.19", "vulns": []}, {"name": "itsdangerous", "version": "2.1.2", "vulns": []}, {"name": "jaraco-classes", "version": "3.3.0", "vulns": []}, {"name": "javalang", "version": "0.11.0", "vulns": []}, {"name": "jinja2", "version": "3.1.2", "vulns": [{"id": "GHSA-h5c8-rqwp-cp95", "fix_versions": ["3.1.3"], "aliases": ["CVE-2024-22195"], "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing spaces. XML/HTML attributes cannot contain spaces, as each would then be interpreted as a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. Note that accepting keys as user input is not common or a particularly intended use case of the `xmlattr` filter, and an application doing so should already be verifying what keys are provided regardless of this fix."}, {"id": "GHSA-h75v-3vvj-5mfj", "fix_versions": ["3.1.4"], "aliases": ["CVE-2024-34064"], "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing non-attribute characters. XML/HTML attributes cannot contain spaces, `/`, `>`, or `=`, as each would then be interpreted as starting a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. The fix for the previous GHSA-h5c8-rqwp-cp95 CVE-2024-22195 only addressed spaces but not other characters.  Accepting keys as user input is now explicitly considered an unintended use case of the `xmlattr` filter, and code that does so without otherwise validating the input should be flagged as insecure, regardless of Jinja version. Accepting _values_ as user input continues to be safe."}, {"id": "GHSA-q2x7-8rv6-6q7h", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56326"], "description": "An oversight in how the Jinja sandboxed environment detects calls to `str.format` allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to store a reference to a malicious string's `format` method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox."}, {"id": "GHSA-gmj6-6f8f-6699", "fix_versions": ["3.1.5"], "aliases": ["CVE-2024-56201"], "description": "A bug in the Jinja compiler allows an attacker that controls both the content and filename of a template to execute arbitrary Python code, regardless of if Jinja's sandbox is used.  To exploit the vulnerability, an attacker needs to control both the filename and the contents of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates where the template author can also choose the template filename."}, {"id": "GHSA-cpwx-vrp4-4pq7", "fix_versions": ["3.1.6"], "aliases": ["CVE-2025-27516"], "description": "An oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.  To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.  Jinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to use the `|attr` filter to get a reference to a string's plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment's attribute lookup."}]}, {"name": "jsonschema", "version": "4.17.3", "vulns": []}, {"name": "keyring", "version": "24.2.0", "vulns": []}, {"name": "license-expression", "version": "30.3.1", "vulns": []}, {"name": "litecli", "version": "1.9.0", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "2.1.2", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "mock", "version": "5.0.1", "vulns": []}, {"name": "more-itertools", "version": "10.1.0", "vulns": []}, {"name": "msgpack", "version": "1.0.5", "vulns": []}, {"name": "objection", "version": "1.11.0", "vulns": []}, {"name": "packageurl-python", "version": "0.16.0", "vulns": []}, {"name": "packaging", "version": "23.1", "vulns": []}, {"name": "paramiko", "version": "3.0.0", "vulns": [{"id": "GHSA-45x7-px36-x8w8", "fix_versions": ["3.4.0"], "aliases": ["CVE-2023-48795"], "description": "### Summary  Terrapin is a prefix truncation attack targeting the SSH protocol. More precisely, Terrapin breaks the integrity of SSH's secure channel. By carefully adjusting the sequence numbers during the handshake, an attacker can remove an arbitrary amount of messages sent by the client or server at the beginning of the secure channel without the client or server noticing it.  ### Mitigations  To mitigate this protocol vulnerability, OpenSSH suggested a so-called \"strict kex\" which alters the SSH handshake to ensure a Man-in-the-Middle attacker cannot introduce unauthenticated messages as well as convey sequence number manipulation across handshakes.  **Warning: To take effect, both the client and server must support this countermeasure.**   As a stop-gap measure, peers may also (temporarily) disable the affected algorithms and use unaffected alternatives like AES-GCM instead until patches are available.  ### Details  The SSH specifications of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com MACs) are vulnerable against an arbitrary prefix truncation attack (a.k.a. Terrapin attack). This allows for an extension negotiation downgrade by stripping the SSH_MSG_EXT_INFO sent after the first message after SSH_MSG_NEWKEYS, downgrading security, and disabling attack countermeasures in some versions of OpenSSH. When targeting Encrypt-then-MAC, this attack requires the use of a CBC cipher to be practically exploitable due to the internal workings of the cipher mode. Additionally, this novel attack technique can be used to exploit previously unexploitable implementation flaws in a Man-in-the-Middle scenario.  The attack works by an attacker injecting an arbitrary number of SSH_MSG_IGNORE messages during the initial key exchange and consequently removing the same number of messages just after the initial key exchange has concluded. This is possible due to missing authentication of the excess SSH_MSG_IGNORE messages and the fact that the implicit sequence numbers used within the SSH protocol are only checked after the initial key exchange.  In the case of ChaCha20-Poly1305, the attack is guaranteed to work on every connection as this cipher does not maintain an internal state other than the message's sequence number. In the case of Encrypt-Then-MAC, practical exploitation requires the use of a CBC cipher; while theoretical integrity is broken for all ciphers when using this mode, message processing will fail at the application layer for CTR and stream ciphers.  For more details see [https://terrapin-attack.com](https://terrapin-attack.com).   ### Impact  This attack targets the specification of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com), which are widely adopted by well-known SSH implementations and can be considered de-facto standard. These algorithms can be practically exploited; however, in the case of Encrypt-Then-MAC, we additionally require the use of a CBC cipher. As a consequence, this attack works against all well-behaving SSH implementations supporting either of those algorithms and can be used to downgrade (but not fully strip) connection security in case SSH extension negotiation (RFC8308) is supported. The attack may also enable attackers to exploit certain implementation flaws in a man-in-the-middle (MitM) scenario."}]}, {"name": "pexpect", "version": "4.8.0", "vulns": []}, {"name": "pip", "version": "25.0.1", "vulns": []}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.7.3", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "pkginfo", "version": "1.9.6", "vulns": []}, {"name": "pkgutil-resolve-name", "version": "1.3.10", "vulns": []}, {"name": "platformdirs", "version": "3.10.0", "vulns": []}, {"name": "pluggy", "version": "1.5.0", "vulns": []}, {"name": "pluginbase", "version": "0.5", "vulns": []}, {"name": "ply", "version": "3.11", "vulns": []}, {"name": "poetry", "version": "1.6.1", "vulns": []}, {"name": "poetry-core", "version": "1.7.0", "vulns": []}, {"name": "poetry-plugin-export", "version": "1.5.0", "vulns": []}, {"name": "progressbar", "version": "2.5", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.36", "vulns": []}, {"name": "psycopg2-binary", "version": "2.9.10", "vulns": []}, {"name": "ptyprocess", "version": "0.7.0", "vulns": []}, {"name": "py-serializable", "version": "1.1.2", "vulns": []}, {"name": "pyasn1", "version": "0.4.8", "vulns": []}, {"name": "pycparser", "version": "2.18", "vulns": []}, {"name": "pyfiglet", "version": "0.8.post1", "vulns": []}, {"name": "pygments", "version": "2.14.0", "vulns": [{"id": "PYSEC-2023-117", "fix_versions": ["2.15.1"], "aliases": ["CVE-2022-40896"], "description": "A ReDoS issue was discovered in pygments/lexers/smithy.py in pygments through 2.15.0 via SmithyLexer."}]}, {"name": "pynacl", "version": "1.5.0", "vulns": []}, {"name": "pyopenssl", "version": "23.0.0", "vulns": []}, {"name": "pyparsing", "version": "3.1.4", "vulns": []}, {"name": "pyproject-hooks", "version": "1.0.0", "vulns": []}, {"name": "pyrsistent", "version": "0.19.3", "vulns": []}, {"name": "pytest", "version": "8.3.5", "vulns": []}, {"name": "pytest-cov", "version": "5.0.0", "vulns": []}, {"name": "pytest-flask", "version": "1.3.0", "vulns": []}, {"name": "qark", "version": "4.0.0", "vulns": []}, {"name": "rapidfuzz", "version": "2.15.1", "vulns": []}, {"name": "requests", "version": "2.31.0", "vulns": [{"id": "GHSA-9wx4-h78v-vm56", "fix_versions": ["2.32.0"], "aliases": ["CVE-2024-35195"], "description": "When making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same origin will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool.  ### Remediation Any of these options can be used to remediate the current issue, we highly recommend upgrading as the preferred mitigation.  * Upgrade to `requests>=2.32.0`. * For `requests<2.32.0`, avoid setting `verify=False` for the first request to a host while using a Requests Session. * For `requests<2.32.0`, call `close()` on `Session` objects to clear existing connections if `verify=False` is used.  ### Related Links * https://github.com/psf/requests/pull/6655"}]}, {"name": "requests-toolbelt", "version": "1.0.0", "vulns": []}, {"name": "rich", "version": "13.9.4", "vulns": []}, {"name": "scp", "version": "0.14.4", "vulns": []}, {"name": "semver", "version": "2.13.0", "vulns": []}, {"name": "setuptools", "version": "41.2.0", "vulns": [{"id": "PYSEC-2022-43012", "fix_versions": ["65.5.1"], "aliases": ["CVE-2022-40897"], "description": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py."}]}, {"name": "shellingham", "version": "1.5.3", "vulns": []}, {"name": "six", "version": "1.11.0", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "soupsieve", "version": "2.3.2.post1", "vulns": []}, {"name": "sqlparse", "version": "0.4.3", "vulns": [{"id": "PYSEC-2023-87", "fix_versions": ["0.4.4"], "aliases": ["CVE-2023-30608", "GHSA-rrm6-wvj7-cwh2"], "description": "sqlparse is a non-validating SQL parser module for Python. In affected versions the SQL parser contains a regular expression that is vulnerable to ReDoS (Regular Expression Denial of Service). This issue was introduced by commit `e75e358`. The vulnerability may lead to Denial of Service (DoS). This issues has been fixed in sqlparse 0.4.4 by commit `c457abd5f`. Users are advised to upgrade. There are no known workarounds for this issue. "}, {"id": "GHSA-2m57-hf25-phgg", "fix_versions": ["0.5.0"], "aliases": ["CVE-2024-4340"], "description": "### Summary Passing a heavily nested list to sqlparse.parse() leads to a Denial of Service due to RecursionError.  ### Details + PoC Running the following code will raise Maximum recursion limit exceeded exception: ```py import sqlparse sqlparse.parse('[' * 10000 + ']' * 10000) ``` We expect a traceback of RecursionError: ```py Traceback (most recent call last):   File \"trigger_sqlparse_nested_list.py\", line 3, in <module>     sqlparse.parse('[' * 10000 + ']' * 10000)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/__init__.py\", line 30, in parse     return tuple(parsestream(sql, encoding))   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/filter_stack.py\", line 36, in run     stmt = grouping.group(stmt)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/grouping.py\", line 428, in group     func(stmt)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/grouping.py\", line 53, in group_brackets     _group_matching(tlist, sql.SquareBrackets)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/engine/grouping.py\", line 48, in _group_matching     tlist.group_tokens(cls, open_idx, close_idx)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 328, in group_tokens     grp = grp_cls(subtokens)   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 161, in __init__     super().__init__(None, str(self))   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 165, in __str__     return ''.join(token.value for token in self.flatten())   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 165, in <genexpr>     return ''.join(token.value for token in self.flatten())   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 214, in flatten     yield from token.flatten()   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 214, in flatten     yield from token.flatten()   File \"/home/uriya/.local/lib/python3.10/site-packages/sqlparse/sql.py\", line 214, in flatten     yield from token.flatten()   [Previous line repeated 983 more times] RecursionError: maximum recursion depth exceeded ```  ### Fix suggestion The [flatten()](https://github.com/andialbrecht/sqlparse/blob/master/sqlparse/sql.py#L207) function of TokenList class should limit the recursion to a maximal depth: ```py from sqlparse.exceptions import SQLParseError  MAX_DEPTH = 100      def flatten(self, depth=1):         \"\"\"Generator yielding ungrouped tokens.          This method is recursively called for all child tokens.         \"\"\"     if depth >= MAX_DEPTH:         raise SQLParseError('Maximal depth reached')         for token in self.tokens:             if token.is_group:                 yield from token.flatten(depth + 1)             else:                 yield token ```  ### Impact Denial of Service (the impact depends on the use). Anyone parsing a user input with sqlparse.parse() is affected. "}]}, {"name": "tabulate", "version": "0.9.0", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomli", "version": "2.0.1", "vulns": []}, {"name": "tomlkit", "version": "0.12.1", "vulns": []}, {"name": "tqdm", "version": "4.64.1", "vulns": [{"id": "GHSA-g7vv-2v7x-gj9p", "fix_versions": ["4.66.3"], "aliases": ["CVE-2024-34062"], "description": "### Impact Any optional non-boolean CLI arguments (e.g. `--delim`, `--buf-size`, `--manpath`) are passed through python's `eval`, allowing arbitrary code execution. Example:  ```sh python -m tqdm --manpath=\"\\\" + str(exec(\\\"import os\\nos.system('echo hi && killall python3')\\\")) + \\\"\" ```  ### Patches https://github.com/tqdm/tqdm/commit/4e613f84ed2ae029559f539464df83fa91feb316 released in `tqdm>=4.66.3`  ### Workarounds None  ### References - https://github.com/tqdm/tqdm/releases/tag/v4.66.3"}]}, {"name": "trove-classifiers", "version": "2023.8.7", "vulns": []}, {"name": "typing-extensions", "version": "4.7.1", "vulns": []}, {"name": "urllib3", "version": "2.0.4", "vulns": [{"id": "PYSEC-2023-192", "fix_versions": ["1.26.17", "2.0.6"], "aliases": ["GHSA-v845-jxx5-vc9f", "CVE-2023-43804"], "description": "urllib3 is a user-friendly HTTP client library for Python. urllib3 doesn't treat the `Cookie` HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a `Cookie` header and unknowingly leak information via HTTP redirects to a different origin if that user doesn't disable redirects explicitly. This issue has been patched in urllib3 version 1.26.17 or 2.0.5."}, {"id": "PYSEC-2023-212", "fix_versions": ["1.26.18", "2.0.7"], "aliases": ["CVE-2023-45803", "GHSA-g4mx-q9vg-27p4"], "description": "urllib3 is a user-friendly HTTP client library for Python. urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 301, 302, or 303 after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although this behavior is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers. Because the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable. Both of the following conditions must be true to be affected by this vulnerability: 1. Using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON) and 2. The origin service is compromised and starts redirecting using 301, 302, or 303 to a malicious peer or the redirected-to service becomes compromised. This issue has been addressed in versions 1.26.18 and 2.0.7 and users are advised to update to resolve this issue. Users unable to update should disable redirects for services that aren't expecting to respond with redirects with `redirects=False` and disable automatic redirects with `redirects=False` and handle 301, 302, and 303 redirects manually by stripping the HTTP request body. "}, {"id": "GHSA-34jh-p97f-mpxf", "fix_versions": ["1.26.19", "2.2.2"], "aliases": ["CVE-2024-37891"], "description": "When using urllib3's proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected.  However, when sending HTTP requests *without* using urllib3's proxy support, it's possible to accidentally configure the `Proxy-Authorization` header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects.  Because this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident.  Users should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach.  ## Affected usages  We believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:  * Setting the `Proxy-Authorization` header without using urllib3's built-in proxy support. * Not disabling HTTP redirects. * Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin.  ## Remediation  * Using the `Proxy-Authorization` header with urllib3's `ProxyManager`. * Disabling HTTP redirects using `redirects=False` when sending requests. * Not using the `Proxy-Authorization` header."}]}, {"name": "virtualenv", "version": "20.24.5", "vulns": [{"id": "PYSEC-2024-187", "fix_versions": ["20.26.6"], "aliases": ["CVE-2024-53899"], "description": "virtualenv before 20.26.6 allows command injection through the activation scripts for a virtual environment. Magic template strings are not quoted correctly when replacing. NOTE: this is not the same as CVE-2024-9287."}]}, {"name": "wcwidth", "version": "0.2.6", "vulns": []}, {"name": "webencodings", "version": "0.5.1", "vulns": []}, {"name": "werkzeug", "version": "2.2.2", "vulns": [{"id": "PYSEC-2023-58", "fix_versions": ["2.2.3"], "aliases": ["GHSA-xg9f-g7g7-2323", "CVE-2023-25577"], "description": "Werkzeug is a comprehensive WSGI web application library. Prior to version 2.2.3, Werkzeug's multipart form data parser will parse an unlimited number of parts, including file parts. Parts can be a small amount of bytes, but each requires CPU time to parse and may use more memory as Python data. If a request can be made to an endpoint that accesses `request.data`, `request.form`, `request.files`, or `request.get_data(parse_form_data=False)`, it can cause unexpectedly high resource usage. This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. The amount of RAM required can trigger an out of memory kill of the process. Unlimited file parts can use up memory and file handles. If many concurrent requests are sent continuously, this can exhaust or kill all available workers. Version 2.2.3 contains a patch for this issue."}, {"id": "PYSEC-2023-57", "fix_versions": ["2.2.3"], "aliases": ["CVE-2023-23934", "GHSA-px8h-6qxv-m22q"], "description": "Werkzeug is a comprehensive WSGI web application library. Browsers may allow \"nameless\" cookies that look like `=value` instead of `key=value`. A vulnerable browser may allow a compromised application on an adjacent subdomain to exploit this to set a cookie like `=__Host-test=bad` for another subdomain. Werkzeug prior to 2.2.3 will parse the cookie `=__Host-test=bad` as __Host-test=bad`. If a Werkzeug application is running next to a vulnerable or malicious subdomain which sets such a cookie using a vulnerable browser, the Werkzeug application will see the bad cookie value but the valid cookie key. The issue is fixed in Werkzeug 2.2.3."}, {"id": "PYSEC-2023-221", "fix_versions": ["2.3.8", "3.0.1"], "aliases": ["GHSA-hrfv-mqp8-q5rw", "CVE-2023-46136"], "description": "Werkzeug is a comprehensive WSGI web application library. If an upload of a file that starts with CR or LF and then is followed by megabytes of data without these characters: all of these bytes are appended chunk by chunk into internal bytearray and lookup for boundary is performed on growing buffer. This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. This vulnerability has been patched in version 3.0.1."}, {"id": "GHSA-2g68-c3qc-8985", "fix_versions": ["3.0.3"], "aliases": ["CVE-2024-34069"], "description": "The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger."}, {"id": "GHSA-f9vj-2wh5-fj8j", "fix_versions": ["3.0.6"], "aliases": ["CVE-2024-49766"], "description": "On Python < 3.11 on Windows, `os.path.isabs()` does not catch UNC paths like `//server/share`. Werkzeug's `safe_join()` relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data. Applications using Python >= 3.11, or not using Windows, are not vulnerable."}, {"id": "GHSA-q34m-jh98-gwm2", "fix_versions": ["3.0.6"], "aliases": ["CVE-2024-49767"], "description": "Applications using Werkzeug to parse `multipart/form-data` requests are vulnerable to resource exhaustion. A specially crafted form body can bypass the `Request.max_form_memory_size` setting.   The `Request.max_content_length` setting, as well as resource limits provided by deployment software and platforms, are also available to limit the resources used during a request. This vulnerability does not affect those settings. All three types of limits should be considered and set appropriately when deploying an application."}]}, {"name": "xattr", "version": "0.10.1", "vulns": []}, {"name": "yapsy", "version": "1.12.2", "vulns": []}, {"name": "zipp", "version": "3.11.0", "vulns": []}], "fixes": []}
